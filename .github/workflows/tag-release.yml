name: Tag Release

on:
  push:
    tags:
      - 'v*'

# 需要写权限以创建 Release。若仓库设置为默认只读，这里会显式请求写权限。
permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
        shell: bash
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint (non-blocking)
        run: pnpm lint
        continue-on-error: true
      - name: Type check
        run: pnpm typecheck
      - name: Sync version from tag to files
        env:
          VERSION: ${{ github.ref_name }}
        run: pnpm run version:set

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            container: ubuntu:22.04
          - os: windows-2022
          - os: macos-13
            platform: macos
            arch: x64
            targets: x86_64-apple-darwin
          - os: macos-14
            platform: macos
            arch: arm64
            targets: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Test shell compatibility (quick fail)
        run: |
          echo "Testing shell compatibility for cleanup operations..."
          
          # 创建测试目录和文件
          mkdir -p test-cleanup/test-dir
          touch test-cleanup/test-file.txt
          touch test-cleanup/test-dir/nested-file.txt
          echo "Created test files and directories"
          
          # 测试rm -rf命令
          echo "Testing rm -rf command..."
          rm -rf test-cleanup
          if [ -d "test-cleanup" ]; then
            echo "ERROR: rm -rf failed to remove directory"
            exit 1
          fi
          echo "rm -rf test passed"
          
          # 测试find命令
          echo "Testing find command..."
          mkdir -p test-find/test-subdir
          touch test-find/test1.txt
          touch test-find/test2.log
          touch test-find/test-subdir/test3.txt
          
          # 测试find删除功能
          find test-find -name "*.txt" -type f -delete
          remaining_txt=$(find test-find -name "*.txt" -type f | wc -l)
          if [ "$remaining_txt" -ne 0 ]; then
            echo "ERROR: find -delete failed to remove .txt files"
            exit 1
          fi
          echo "find -delete test passed"
          
          # 清理测试文件
          rm -rf test-find
          echo "All shell compatibility tests passed!"
        shell: bash
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
        shell: bash
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Install system deps for Linux (Ubuntu 22.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          apt-get update && apt-get install -y \
            libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev \
            librsvg2-dev build-essential curl wget file patchelf libssl-dev \
            xdg-utils desktop-file-utils
        shell: bash

      - name: Cache Tauri bundle tools (Linux)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/tauri
          key: ${{ runner.os }}-tauri-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            ${{ runner.os }}-tauri-

      - name: Setup macOS build environment
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo "Setting up macOS build environment..."
          # 检查 Xcode Command Line Tools（只检查不安装，GitHub Actions 应该已预装）
          if xcode-select --print-path; then
            echo "Xcode Command Line Tools found at: $(xcode-select --print-path)"
          else
            echo "::warning::Xcode Command Line Tools not found, but continuing..."
          fi
          
          # 检查必要的打包工具
          echo "Checking required tools..."
          which hdiutil && echo "✓ hdiutil found" || echo "::warning::hdiutil not found"
          which codesign && echo "✓ codesign found" || echo "::warning::codesign not found"
          which security && echo "✓ security found" || echo "::warning::security not found"
          
          # 显示系统信息
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Architecture: $(uname -m)"
          
          # 检查磁盘空间
          echo "Available disk space:"
          df -h / | tail -1
        shell: bash

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ (matrix.os == 'macos-13' || matrix.os == 'macos-14') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}


      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Inject commit SHA to env
        run: echo "NEXT_PUBLIC_GIT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV
        shell: bash

      - name: Clean bundle directory before build
        run: |
          echo "Cleaning bundle directory to ensure fresh build..."
          
          # 只清理bundle目录，保留依赖编译缓存（使用 || true 确保不会失败）
          if [ -d "src-tauri/target/release/bundle" ]; then
            rm -rf src-tauri/target/release/bundle || echo "Failed to clean bundle directory, continuing..."
            echo "✓ Bundle directory cleaned"
          else
            echo "Bundle directory does not exist, skipping"
          fi
          
          # macOS 专用：清理可能占用空间的临时文件
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            echo ""
            echo "Cleaning macOS temporary files..."
            
            # 清理 Homebrew 缓存（如果存在）
            if [ -d "$HOME/Library/Caches/Homebrew" ]; then
              BREW_SIZE=$(du -sh "$HOME/Library/Caches/Homebrew" 2>/dev/null | cut -f1 || echo "unknown")
              echo "Homebrew cache size: $BREW_SIZE"
              rm -rf "$HOME/Library/Caches/Homebrew"/* 2>/dev/null || true
              echo "✓ Homebrew cache cleaned"
            else
              echo "Homebrew cache not found"
            fi
            
            # 清理 Xcode derived data（如果存在）
            if [ -d "$HOME/Library/Developer/Xcode/DerivedData" ]; then
              XCODE_SIZE=$(du -sh "$HOME/Library/Developer/Xcode/DerivedData" 2>/dev/null | cut -f1 || echo "unknown")
              echo "Xcode DerivedData size: $XCODE_SIZE"
              rm -rf "$HOME/Library/Developer/Xcode/DerivedData"/* 2>/dev/null || true
              echo "✓ Xcode derived data cleaned"
            else
              echo "Xcode DerivedData not found"
            fi
            
            # 显示可用空间
            echo ""
            echo "Available disk space after cleanup:"
            df -h / | head -2 || df -h /
          fi
        shell: bash

      - name: Pre-build cleanup for macOS DMG
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo "=== macOS DMG Pre-build Cleanup ==="
          
          # 1. 卸载所有可能挂载的磁盘镜像
          echo "Unmounting any existing disk images..."
          hdiutil detach /Volumes/Chatless 2>/dev/null || echo "No Chatless volume to detach"
          
          # 2. 清理可能的残留 DMG 文件和临时文件
          echo "Cleaning temporary DMG files..."
          rm -f /tmp/*.dmg 2>/dev/null || true
          rm -f /tmp/dmg.* 2>/dev/null || true
          
          # 3. 清理之前构建的 DMG
          if [ -d "src-tauri/target/release/bundle/dmg" ]; then
            echo "Removing old DMG bundles..."
            rm -rf src-tauri/target/release/bundle/dmg/* 2>/dev/null || true
          fi
          
          # 4. 等待文件系统稳定
          echo "Waiting for filesystem to stabilize..."
          sleep 2
          
          # 5. 显示当前磁盘镜像挂载状态
          echo "Current disk image mounts:"
          hdiutil info 2>/dev/null | grep -i "image-path" || echo "No disk images mounted"
          
          echo "✓ Pre-build cleanup completed"
        shell: bash
        continue-on-error: true

      - name: Build Tauri app
        run: |
          set +e  # 允许命令失败，我们手动处理错误
          echo "Starting Tauri build for ${{ matrix.os }} ${{ matrix.arch || 'unknown' }}"
          
          # 启用详细日志
          export RUST_BACKTRACE=1
          export RUST_LOG=tauri=debug
          
          # macOS 专用：带重试的构建函数
          build_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "=== Build attempt $attempt of $max_attempts ==="
              
              # 运行构建
              pnpm tauri build
              local exit_code=$?
              
              if [ $exit_code -eq 0 ]; then
                echo "✓ Build completed successfully on attempt $attempt"
                return 0
              fi
              
              echo "::warning::Build attempt $attempt failed with exit code $exit_code"
              
              # 如果不是最后一次尝试，进行清理并重试
              if [ $attempt -lt $max_attempts ]; then
                echo "Cleaning up for retry..."
                
                # 强制卸载所有挂载的磁盘镜像
                hdiutil detach /Volumes/Chatless -force 2>/dev/null || true
                
                # 清理 DMG 临时文件
                rm -rf src-tauri/target/release/bundle/dmg 2>/dev/null || true
                rm -f /tmp/*.dmg /tmp/dmg.* 2>/dev/null || true
                
                # 等待文件系统稳定
                echo "Waiting 5 seconds before retry..."
                sleep 5
                
                attempt=$((attempt + 1))
              else
                echo "::error::All $max_attempts build attempts failed"
                return $exit_code
              fi
            done
          }
          
          # 执行构建（macOS 使用重试，其他平台直接构建）
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            build_with_retry
            BUILD_EXIT_CODE=$?
          else
            pnpm tauri build
            BUILD_EXIT_CODE=$?
          fi
          
          # 处理构建结果
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "✓ Build completed successfully"
            exit 0
          else
            echo "::warning::Build failed with exit code $BUILD_EXIT_CODE"
            
            # 如果是 macOS，收集诊断信息并尝试降级处理
            if [[ "${{ matrix.platform }}" == "macos" ]]; then
              echo "::group::macOS Build Diagnostics"
              
              # 检查是否有成功生成的 .app 文件
              if [ -d "src-tauri/target/release/bundle/macos/Chatless.app" ]; then
                echo "::notice::Found Chatless.app bundle, DMG may have failed but app is available"
                
                # 手动创建 .app.tar.gz（作为 DMG 失败的备份）
                echo "Creating fallback .app.tar.gz bundle..."
                cd src-tauri/target/release/bundle/macos
                tar -czf "Chatless.app.tar.gz" "Chatless.app" 2>/dev/null || true
                cd -
                
                if [ -f "src-tauri/target/release/bundle/macos/Chatless.app.tar.gz" ]; then
                  echo "✓ Fallback bundle created successfully"
                  echo "::notice::Build partially succeeded - .app bundle available even though DMG failed"
                  # 部分成功，不退出失败
                  BUILD_EXIT_CODE=0
                fi
              fi
              
              # 收集诊断信息
              echo ""
              echo "=== Disk images info ==="
              hdiutil info 2>/dev/null || echo "hdiutil info failed"
              
              echo ""
              echo "=== Mounted volumes ==="
              mount | grep -i chatless || echo "No Chatless volumes mounted"
              
              echo ""
              echo "=== DMG directory contents ==="
              ls -la src-tauri/target/release/bundle/dmg/ 2>/dev/null || echo "DMG directory not found"
              
              echo ""
              echo "=== macOS bundle contents ==="
              ls -la src-tauri/target/release/bundle/macos/ 2>/dev/null || echo "macOS bundle directory not found"
              
              echo ""
              echo "=== bundle_dmg.sh (if exists) ==="
              if [ -f "src-tauri/target/release/bundle/dmg/bundle_dmg.sh" ]; then
                cat src-tauri/target/release/bundle/dmg/bundle_dmg.sh 2>/dev/null || echo "Cannot read bundle_dmg.sh"
              else
                echo "bundle_dmg.sh not found"
              fi
              
              echo "::endgroup::"
            fi
            
            # 最终退出代码
            if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "::error::Build failed, but continuing workflow to preserve other artifacts"
            fi
            exit $BUILD_EXIT_CODE
          fi
        shell: bash
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          NEXT_PUBLIC_GIT_SHA: ${{ github.sha }}
         
      - name: List generated bundles (macOS only)
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo "=== Generated bundles for ${{ matrix.arch }} ==="
          echo "Target: ${{ matrix.targets }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo ""
          echo "=== DMG files ==="
          find src-tauri/target/release/bundle -name "*.dmg" | sort
          echo ""
          echo "=== App bundles ==="
          find src-tauri/target/release/bundle -name "*.app.tar.gz" | sort
          echo ""
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/release/bundle/macos/ || echo "macos directory not found"
          echo ""
          echo "=== Target directory contents ==="
          ls -la src-tauri/target/${{ matrix.targets }}/release/ || echo "target directory not found"
        shell: bash
      
      - name: Clean test artifacts before upload
        run: |
          echo "Cleaning test artifacts before upload..."
          # 清理可能存在的测试文件，确保只上传正式版本
          find src-tauri/target/release/bundle -name "*test*" -type f -delete || true
          find src-tauri/target/release/bundle -name "*0.0.0*" -type f -delete || true
          echo "Test artifacts cleaned"
        shell: bash
      
      - name: Upload artifacts (filtered bundles only)
        uses: actions/upload-artifact@v4
        with:
          name: chatless-${{ matrix.os }}-${{ matrix.arch || 'unknown' }}
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.dmg
            src-tauri/target/release/bundle/macos/*.app.tar.gz
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/**/*.sig
            src-tauri/target/release/bundle/**/*.sha256*
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository (keep artifacts)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0  # 获取完整历史
          fetch-tags: true  # 获取所有标签
      - name: Collect recent commits
        run: |
          echo "=== Git 信息调试 ==="
          echo "当前分支: $(git branch --show-current)"
          echo "当前提交: $(git rev-parse HEAD)"
          echo "所有标签:"
          git tag -l | tail -10
          echo ""
          
          # 查找最新的正式版本标签（排除测试标签）
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -v "test-" | head -1)
          echo "最新正式标签: $LATEST_TAG"
          
          if [ -n "$LATEST_TAG" ]; then
            # 如果有正式标签，获取从该标签到现在的提交
            COMMITS=$(git log --oneline --no-merges "$LATEST_TAG"..HEAD | head -20)
            echo "从标签 $LATEST_TAG 到现在的提交:"
          else
            # 如果没有正式标签，获取最近的20个提交
            COMMITS=$(git log --oneline --no-merges -20)
            echo "最近的20个提交:"
          fi
          
          echo "$COMMITS"
          echo ""
          
          # 如果没有提交，使用默认消息
          if [ -z "$COMMITS" ]; then
            COMMITS="新版本发布"
            echo "没有找到提交，使用默认消息"
          fi
          
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "最终收集到的提交:"
          echo "$COMMITS"
        shell: bash
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Display structure of downloaded files
        run: |
          echo "=== Artifacts directory structure ==="
          ls -la artifacts/
          echo ""
          echo "=== Contents of each artifact directory ==="
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "--- $dir ---"
              ls -la "$dir"
              echo ""
            fi
          done
        shell: bash
      - name: Rename files to avoid conflicts
        run: |
          echo "Starting file renaming process..."
          
          # 检查artifacts目录结构
          echo "=== Current artifacts structure ==="
          ls -la artifacts/
          
          # 使用find命令直接重命名文件，避免cd路径问题
          echo "Processing macOS x64 files..."
          if [ -d "artifacts/chatless-macos-13-x64" ]; then
            find artifacts/chatless-macos-13-x64 -name "*.app.tar.gz" -type f | while read file; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            newname=$(echo "$filename" | sed 's/\.app\.tar\.gz/\.x64\.app\.tar\.gz/')
            mv "$file" "$dir/$newname"
            echo "Renamed $filename to $newname"
            done
          else
            echo "Directory artifacts/chatless-macos-13-x64 not found, skipping x64 processing"
          fi
          
          if [ -d "artifacts/chatless-macos-13-x64" ]; then
            find artifacts/chatless-macos-13-x64 -name "*.app.tar.gz.sig" -type f | while read file; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            newname=$(echo "$filename" | sed 's/\.app\.tar\.gz\.sig/\.x64\.app\.tar\.gz\.sig/')
            mv "$file" "$dir/$newname"
            echo "Renamed $filename to $newname"
            done
          else
            echo "Directory artifacts/chatless-macos-13-x64 not found, skipping x64 sig processing"
          fi
          
          echo "Processing macOS ARM64 files..."
          if [ -d "artifacts/chatless-macos-14-arm64" ]; then
            find artifacts/chatless-macos-14-arm64 -name "*.app.tar.gz" -type f | while read file; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            newname=$(echo "$filename" | sed 's/\.app\.tar\.gz/\.arm64\.app\.tar\.gz/')
            mv "$file" "$dir/$newname"
            echo "Renamed $filename to $newname"
            done
          else
            echo "Directory artifacts/chatless-macos-14-arm64 not found, skipping arm64 processing"
          fi
          
          if [ -d "artifacts/chatless-macos-14-arm64" ]; then
            find artifacts/chatless-macos-14-arm64 -name "*.app.tar.gz.sig" -type f | while read file; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            newname=$(echo "$filename" | sed 's/\.app\.tar\.gz\.sig/\.arm64\.app\.tar\.gz\.sig/')
            mv "$file" "$dir/$newname"
            echo "Renamed $filename to $newname"
            done
          else
            echo "Directory artifacts/chatless-macos-14-arm64 not found, skipping arm64 sig processing"
          fi
          
          # 验证重命名结果
          echo "=== File renaming completed. New structure ==="
          ls -R artifacts
          
          # 检查是否有重复文件名
          echo "=== Checking for duplicate filenames ==="
          duplicates=$(find artifacts -name "*.app.tar.gz*" -type f | sed 's/.*\///' | sort | uniq -d)
          if [ -z "$duplicates" ]; then
            echo "No duplicate filenames found"
          else
            echo "Warning: Duplicate filenames detected!"
            echo "$duplicates"
            exit 1
          fi
        shell: bash
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
        shell: bash
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Release Notes with Quick Download Links
        run: |
          # 提取版本号（去掉v前缀）
          VERSION=${GITHUB_REF_NAME#v}

          # 从CHANGELOG.md抓取对应版本更新内容（失败时使用默认文案）
          CHANGELOG_NOTES=$(node scripts/extract-changelog.mjs --version "$VERSION" --path CHANGELOG.md --fallback "本次更新包含问题修复、性能改进与体验优化。")
          CHANGELOG_NOTES_EN=$(node scripts/extract-changelog.mjs --version "$VERSION" --path CHANGELOG.md --fallback "This update includes bug fixes, performance improvements, and UX polish.")
          
          # 生成中文版发布说明
          cat << EOF > release_notes.md
          # Chatless $VERSION 发布
          
          ## 下载
          ### Windows
          - [Chatless Setup (.exe)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64-setup.exe)
          - [Chatless MSI (.msi)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64_en-US.msi)
                    
          ### macOS
          - [Apple Silicon](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_aarch64.dmg)
          - [Intel 处理器](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64.dmg)

          ### Linux
          - [Red Hat/CentOS/Fedora (.rpm)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless-${VERSION}-1.x86_64.rpm)
          - [Ubuntu/Debian (.deb)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_amd64.deb)
          - [通用格式 (.AppImage)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_amd64.AppImage)
                    
          ---
          
          ## 安装说明
          
          ### Windows
          1. 下载 .exe 文件（推荐）或 .msi 文件
          2. 双击运行安装程序
          3. 按提示完成安装
          
          ### macOS
          1. 根据处理器选择版本：
             - Apple Silicon (M1/M2/M3): 下载 aarch64.dmg
             - Intel 处理器: 下载 x64.dmg
          2. 双击打开，拖拽到 Applications 文件夹
          3. 从 Applications 启动应用
          
          **注意**: 首次启动可能提示"已损坏"，请：
          1. 点击"取消"
          2. 打开终端，运行: 
          ```bash
          sudo xattr -r -d com.apple.quarantine /Applications/Chatless.app
          ```
          3. 重新启动应用
          
          ### Linux
          1. 根据发行版选择格式：
             - Red Hat/CentOS/Fedora: 下载 .rpm 文件
             - Ubuntu/Debian: 下载 .deb 文件
             - 其他发行版: 下载 .AppImage 文件
          2. 使用包管理器安装或直接运行
          
          ---
          
          ## 常见问题
          
          **Windows 闪退**: 安装 [Visual C++ 运行库](https://aka.ms/vs/17/release/vc_redist.x64.exe)
          
          **macOS 无法打开**: 使用终端命令移除隔离属性（见上方说明）
          
          **Linux 权限问题**: 确保给予执行权限 \`chmod +x\`
          
          ---
          
          ## 文档
          
          - [安装指南](https://github.com/${{ github.repository }}/blob/main/INSTALLATION_INSTRUCTIONS.md)
          - [项目主页](https://github.com/${{ github.repository }})
          - [问题反馈](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          ## 更新内容

          ${CHANGELOG_NOTES}
          EOF
          
          # 生成英文版发布说明
          cat << EOF > release_notes_en.md
          # Chatless $VERSION Release
          
          ## Download
          ### Windows
          - [Chatless Setup (.exe)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64-setup.exe)
          - [Chatless MSI (.msi)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64_en-US.msi)
                    
          ### macOS
          - [Apple Silicon](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_aarch64.dmg)
          - [Intel Processor](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_x64.dmg)

          ### Linux
          - [Red Hat/CentOS/Fedora (.rpm)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless-${VERSION}-1.x86_64.rpm)
          - [Ubuntu/Debian (.deb)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_amd64.deb)
          - [Universal (.AppImage)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Chatless_${VERSION}_amd64.AppImage)

          ---
          
          ## Installation
          
          ### Windows
          1. Download .exe file (recommended) or .msi file
          2. Double-click to run installer
          3. Follow prompts to complete installation
          
          ### macOS
          1. Choose version based on processor:
             - Apple Silicon (M1/M2/M3): Download aarch64.dmg
             - Intel Processor: Download x64.dmg
          2. Double-click to open, drag to Applications folder
          3. Launch from Applications
          
          **Note**: First launch may show "damaged" message, please:
          1. Click "Cancel"
          2. Open Terminal, run:
          ```bash
          sudo xattr -r -d com.apple.quarantine /Applications/Chatless.app
          ```
          3. Restart application
          
          ### Linux
          1. Choose format based on distribution:
             - Red Hat/CentOS/Fedora: Download .rpm file
             - Ubuntu/Debian: Download .deb file
             - Other distributions: Download .AppImage file
          2. Install using package manager or run directly
          
          ---
          
          ## Common Issues
          
          **Windows crash**: Install [Visual C++ Runtime](https://aka.ms/vs/17/release/vc_redist.x64.exe)
          
          **macOS won't open**: Use terminal command to remove quarantine (see above)
          
          **Linux permission**: Ensure execute permission with \`chmod +x\`
          
          ---
          
          ## Documentation
          
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/INSTALLATION_INSTRUCTIONS_EN.md)
          - [Project Homepage](https://github.com/${{ github.repository }})
          - [Report Issues](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          ## What's New

          ${CHANGELOG_NOTES_EN}
          EOF
          
          echo "Generated release notes with quick download links"
          echo "=== Chinese Version ==="
          cat release_notes.md
          echo -e "\n=== English Version ==="
          cat release_notes_en.md
        shell: bash
      - name: List files to be uploaded
        run: |
          echo "=== Files that will be uploaded to Release ==="
          echo "DMG files:"
          find artifacts -name "*.dmg" -type f || echo "No DMG files found"
          echo ""
          echo "App tar.gz files:"
          find artifacts -name "*.app.tar.gz" -type f || echo "No app.tar.gz files found"
          echo ""
          echo "AppImage files:"
          find artifacts -name "*.AppImage" -type f || echo "No AppImage files found"
          echo ""
          echo "DEB files:"
          find artifacts -name "*.deb" -type f || echo "No DEB files found"
          echo ""
          echo "RPM files:"
          find artifacts -name "*.rpm" -type f || echo "No RPM files found"
          echo ""
          echo "EXE files:"
          find artifacts -name "*.exe" -type f || echo "No EXE files found"
          echo ""
          echo "MSI files:"
          find artifacts -name "*.msi" -type f || echo "No MSI files found"
          echo ""
          echo "Signature files:"
          find artifacts -name "*.sig" -type f || echo "No SIG files found"
          echo ""
          echo "SHA256 files:"
          find artifacts -name "*.sha256*" -type f || echo "No SHA256 files found"
          echo ""
          echo "=== All files in artifacts directory ==="
          find artifacts -type f | sort
        shell: bash
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.app.tar.gz
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.sig
            artifacts/**/*.sha256*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

      - name: Generate updater JSON (stable/alpha channels)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          UPDATER_PROXY_PREFIX: https://gh-proxy.com/
          RELEASE_TAG: ${{ github.ref_name }}
        run: pnpm run update:generate
        shell: bash
      - name: Verify updater endpoints
        env:
          EXPECTED_VERSION: ${{ github.ref_name }}
          ENDPOINTS: |
            https://github.com/${{ github.repository }}/releases/latest/download/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/latest/download/update.json
            https://github.com/${{ github.repository }}/releases/download/updater-alpha/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/updater-alpha/update.json
        run: pnpm run update:verify
        continue-on-error: true
        shell: bash

